name: Build and Release

on:
  schedule:
    - cron: "30 */12 * * *"
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build_release:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [master, stable]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check build required
        id: check_build
        shell: pwsh
        run: |
          Import-Module ./GitHubActionsHelpers.psm1
          if (Test-BuildRequired -BuildType ${{ matrix.build_type }}) {
            "build_required=true"  >> $env:GITHUB_OUTPUT
          } else {
            "build_required=false" >> $env:GITHUB_OUTPUT
          }

      - name: Build Installer
        if: steps.check_build.outputs.build_required == 'true'
        id: build
        run: |
          ./BuildSetup.ps1 -BuildType ${{ matrix.build_type }}
        shell: pwsh

      - name: Get mpv version
        if: steps.build.outcome == 'success'
        id: getmpvversion
        shell: pwsh
        run: |
          . .\BuildSetup.ps1
          "version=$(Get-MpvVersion)" >> $env:GITHUB_OUTPUT

      - name: Create Release
        if: steps.build.outcome == 'success'
        id: release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          preserve_order: true
          tag_name: ${{ steps.getmpvversion.outputs.version }}
          name: ${{ steps.getmpvversion.outputs.version }}
          prerelease: ${{ matrix.build_type == 'master' }}
          body: "MPV Version : ${{ steps.getmpvversion.outputs.version }}"

  prune:
    needs: build_release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
      KEEP_COUNT: 60

    steps:
      - name: Fetch all releases
        id: fetch
        run: |
          gh api repos/$OWNER/$REPO/releases --paginate > releases.json

      - name: Determine prereleases to delete
        id: filter
        run: |
          # Extract prereleases that are not drafts, sort by created_at (oldest first)
          jq -r '.[] | select(.prerelease==true and .draft==false) | "\(.id) \(.tag_name) \(.created_at)"' releases.json \
            | sort -k3 > prereleases.txt

          total=$(wc -l < prereleases.txt)
          echo "Total prereleases: $total"

          # Figure out how many to delete (all except last KEEP_COUNT)
          to_delete_count=$((total - KEEP_COUNT))
          if [ $to_delete_count -gt 0 ]; then
            head -n $to_delete_count prereleases.txt > delete_list.txt
            echo "Found $to_delete_count prereleases to delete."
            cat delete_list.txt
            echo "needs_delete=true" >> $GITHUB_OUTPUT
          else
            echo "No prereleases need deletion."
            > delete_list.txt
            echo "needs_delete=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete old prereleases and tags
        if: steps.filter.outputs.needs_delete == 'true'
        run: |
          count=0
          while read -r id tag created; do
            if [ -n "$id" ]; then
              echo "Deleting release $tag ($created)"
              gh api --method DELETE repos/$OWNER/$REPO/releases/$id
              gh api --method DELETE repos/$OWNER/$REPO/git/refs/tags/$tag
              count=$((count+1))
            fi
          done < delete_list.txt
          echo "Deleted $count prereleases."